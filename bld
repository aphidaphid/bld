#!/bin/bash

COLOR_ERROR="\e[1;31m"
COLOR_SUCCESS="\e[1;32m"
COLOR_ALERT="\e[1;33m"
COLOR_WORKING="\e[104m\e[97m"

readonly CMAKE_VERSION=3.5
readonly CMAKE_CXX_STANDARD=23

if [[ -f "./CMakeLists.txt" ]]; then
  PROJECT_NAME=$(grep -e project CMakeLists.txt | cut -d "(" -f2 | cut -d ")" -f1)
else
  PROJECT_NAME=$(pwd | rev | cut -d / -f 1 | rev)
fi

# no argument supplied
if [ -z "$@" ]; then
  echo -e "bld :: specify one or more operations:
  -b: build
  -c: clean (delete ./build)
  -g: generate quickstart project (CMakeLists.txt & src/main.cpp)
  -r: run project binary\e[0m"
  exit
fi

error() {
  echo -e "${COLOR_ERROR}bld :: [error] $1\e[0m"
  exit
}

alert() {
  echo -e "${COLOR_ALERT}bld :: [alert] $1\e[0m"
  exit
}

alert_no_exit() {
  echo -e "${COLOR_ALERT}bld :: [alert] $1\e[0m"
}

print_status() {
  echo -e "${COLOR_WORKING}bld :: $1\e[0m"
}

check_cmake() {
  if [[ ! -f "./CMakeLists.txt" ]]; then
    error "CMakeLists.txt file not found; use -g to generate a new project"
  fi
}

build() {
  if [ ! -d "./build" ]; then
    mkdir build
  fi

  pushd build
    if [ -f "./${PROJECT_NAME}" ]; then
      rm ./${PROJECT_NAME}
    fi
    cmake ..
    make
  popd
}

while getopts ":bcgr" arg; do
  case ${arg} in
    b|-b|--build)
      check_cmake
      print_status "building..."
      build
      ;;
    c|-c|--clean)
      if [ -d "./build" ]; then
        print_status "cleaning..."
        rm -rf ./build
      else
        alert "no cleaning required"
      fi
      ;;
    g|-g|--gen)
      FILES=$(ls ~/.local/share/bld)
      for f in ${FILES}; do
        if [[ -f "./${f}" || -d "./${f}" ]]; then
          alert_no_exit "${f} already exists"
        else
          print_status "copying ${f}..."
          cp -r ~/.local/share/bld/${f} .
          if [[ ${f} == "CMakeLists.txt" ]]; then # replace __PROJECT_NAME__ with folder name
            sed -i -e "s/__PROJECT_NAME__/${PROJECT_NAME}/g" ${f}
          fi
        fi
      done
      ;;
    r|-r|--run)
      if [[ ! -f "./build/${PROJECT_NAME}" ]]; then
        error "project binary does not exist\e[0m"
      else
        print_status "running..."
        ./build/${PROJECT_NAME}
      fi
      ;;
  esac
done

echo -e "${COLOR_SUCCESS}bld :: complete\e[0m"
